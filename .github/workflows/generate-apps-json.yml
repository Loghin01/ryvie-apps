name: Generate and Release apps.json

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'apps.json'

permissions:
  contents: write  # Required to create tags and releases

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repo with full history and tags
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0
          fetch-tags: true

      # 2Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y jq wget curl
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      # 3Ô∏è‚É£ Generate apps.json
      - name: Generate apps.json
        run: bash ./generate-apps-json.sh

      # 4Ô∏è‚É£ Commit and push apps.json if changed
      - name: Commit apps.json if changed
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github-actions"
          git add apps.json
          git diff --cached --quiet || git commit -m "Update apps.json"
          git push origin HEAD:${{ github.ref }}

      # 5Ô∏è‚É£ Debug tags to verify visibility
      - name: List existing tags
        run: git tag -l

      # 6Ô∏è‚É£ Determine next version based on existing tags
      - name: Determine next version
        id: version
        run: |
          latest=$(git tag | sort -V | tail -n 1)
          if [ -z "$latest" ]; then
            latest="v1.0.0"
          fi
          base=${latest%.*}
          patch=${latest##*.}
          next="${base}.$((patch + 1))"
          echo "next_version=$next" >> $GITHUB_OUTPUT
          echo "üì¶ Next version: $next"

      # 7Ô∏è‚É£ Create and push new tag (skip if already exists)
      - name: Create and push Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github-actions"
          tag=${{ steps.version.outputs.next_version }}
          if git ls-remote --tags origin | grep -q "refs/tags/${tag}$"; then
            echo "üîÅ Tag ${tag} already exists, skipping push."
          else
            git tag $tag
            git push origin $tag
          fi

      # 8Ô∏è‚É£ Create GitHub release with apps.json
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.next_version }}
          name: "Auto Release ${{ steps.version.outputs.next_version }}"
          body: "Automatic release of latest apps.json generated by CI."
          files: apps.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
